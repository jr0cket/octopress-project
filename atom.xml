<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jr0cket - community developer]]></title>
  <link href="http://jr0cket.github.io/octopress-project/atom.xml" rel="self"/>
  <link href="http://jr0cket.github.io/octopress-project/"/>
  <updated>2014-03-24T22:44:22+00:00</updated>
  <id>http://jr0cket.github.io/octopress-project/</id>
  <author>
    <name><![CDATA[John Stevenson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs Org-mode for all your content]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/emacs-org-mode-for-all-your-content/"/>
    <updated>2014-03-16T12:35:37+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/emacs-org-mode-for-all-your-content</id>
    <content type="html"><![CDATA[<p>Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  Unfortunately, outside of Emacs nothing uses Org-mode formating.  However, as Org-mode is just a text format then it can be easily converted by Emacs into other things.  I&rsquo;ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any other formats you need.</p>

<!-- more -->


<p>[TODO: a bit too wordy]</p>

<blockquote><p>In previous articles I have covered generating presentations from Org-mode using Reveal.js.</p></blockquote>


<h2>Why write in Org-mode</h2>

<p>If you are writing anything more than a few paragraphs of text then it gets quite easy to become lost in your own writing.  Having to scroll around to see what you covered earlier can slow down your creative process.</p>

<p>With Org-mode you can structure you content easily, as your &ldquo;topics or table of contents&rdquo; are your structure.  Every heading and sub-heading can fold away the content underneath it, unfolding the only the parts of your writing you want to see.</p>

<p>Another useful aspect of Org-mode is that it hides the link part of the URL, so you only see the text part of the link.  This helps keep your text easy to read.</p>

<p>As with many other languages supported by Emacs you also get colour highlighting for different styles along with spell checking and suggested words as you type.</p>

<p>[TODO: Insert picture of Org-mode &ndash; or maybe even a video]</p>

<h2>Reasons I need to use Markdown</h2>

<p>I use markdown for my Jekyll based blog and website and as these are relativley small I often just write them directly in Markdown.  However, if its a series of posts on the same topic then I can easily structure that series using Org-mode and generate the markdown content when I am ready to add it to my blog.</p>

<p>I also need to use markdown for the self-publishing book website, <a href="LeanPub">https://leanpub.com/</a>.  I write the whole book in Org-mode, again so I can structure it sensibly and jump to specific parts of the content easily.  I can also see topics (headings) I have written about in each chapter of the book very easily by open and closing sections of the Org-mode file.</p>

<h2>Generating Markdown from Org-mode</h2>

<p>In Emacs, open your Org-mode file (or switch to the buffer containing it).  Then export a copy of then content into markdown with one of the following commands</p>

<pre><code>M-x org-md-export-to-markdown
C-c C-e m m
</code></pre>

<p>Exports the current Org-mode file as a new text file of the same name but with the .md extension rather than .org.</p>

<p>When you export again, the .md file will be overwritten without warning, so if you want to make changes you edit the Org-mode file and re-generate the markdown file.</p>

<p>If you want to see the markdown file as soon as it is created, use the following command to open it in Emacs:</p>

<pre><code>C-c C-e m o
</code></pre>

<p>If you do not wish to create a file from the export, the following command generated markdown and places it inside a tempory Emacs buffer:</p>

<pre><code>M-x org-md-export-as-markdown
C-c C-e m M 
</code></pre>

<p>[TODO: what does this command do?]</p>

<pre><code>M-x org-md-convert-region-to-markdown
</code></pre>

<p>The Markdown export is build on top of the <a href="HTML%20export">http://orgmode.org/manual/HTML-export.html#HTML-export</a> and anything not supported by the markdown syntax will be converted by that HTML export process.  See the Org-mode website for more details on <a href="exporting%20markdown">http://orgmode.org/manual/Markdown-export.html#Markdown-export</a> and other formats.</p>

<blockquote><p>Note: for the header and sectioning structure the Markdown export can generate both atx and setext types for headlines, according to org-md-headline-style. ATX introduces a hard limit of two levels of headings, whereas Setext pushes it to six. Headings below that limit are exported as lists. You can also set a soft limit before that one (see [http://orgmode.org/manual/Export-settings.html#Export-settings](Export settings)).</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Octopress with bug fixes and enhancments]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/updating-octopress-with-bug-fixes-and-enhancments/"/>
    <updated>2014-03-13T19:32:54+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/updating-octopress-with-bug-fixes-and-enhancments</id>
    <content type="html"><![CDATA[<p>For each Octopres project you have created (ie. for each blog / website you created with Octopress) you need to pull some code from Github remote (octopress master) and run a few rake tasks.</p>

<p>Before you start with an update, check you Octopress projects files have been added to the Git repository or Stashed out of the way &ndash; as Octopress will try and overwrite them (although as its using git it will fail and warn you about a merge conflict).</p>

<pre><code>git pull octopress master     # Get the latest Octopress
bundle install                # Keep gems updated
rake update_source            # update the template's source
rake update_style             # update the template's style
</code></pre>

<p><a href="http://octopress.org/docs/updating/">http://octopress.org/docs/updating/</a></p>

<p>Thank you</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating content in markdown for your Octopress blog]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/creating-content-in-markdown-for-your-octopress-blog/"/>
    <updated>2014-03-13T19:32:20+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/creating-content-in-markdown-for-your-octopress-blog</id>
    <content type="html"><![CDATA[<p>Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.</p>

<blockquote><p>In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently.</p></blockquote>




<!-- more -->


<h2>Adding styles to text</h2>

<p>Headings
Bold, italic</p>

<h2>Adding images</h2>

<p>Images are always a good way to explain concepts or to just get attendtion for your writing.</p>

<p>To add an image to your post, you add the following code</p>

<figure class='code'><figcaption><span>[Insert an image in your post]</span><a href='http://octopress.org/docs/plugins/image-tag/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;img class="[class names]" src="http://jr0cket.github.io/octopress-project/path/to/image" title="[width] [height] [title text [alt text]]" ></span></code></pre></td></tr></table></div></figure>


<p>Here is an example with my two cute cats:</p>

<p><img src="http://jr0cket.github.io/octopress-project/images/kittens-snuggled.png"></p>

<h3>More examples</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;img src="http://placekitten.com/890/280">
</span><span class='line'>  &lt;img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" >
</span><span class='line'>  &lt;img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" >
</span><span class='line'>  &lt;img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten"></span></code></pre></td></tr></table></div></figure>


<h2>Showing code</h2>

<h3>Code blocks</h3>

<p>You can embed code snippets directly in the markup of the blog posts you write using the codeblock directive.
<a href="http://octopress.org/docs/plugins/codeblock/">http://octopress.org/docs/plugins/codeblock/</a></p>

<p>These are okay but I have not figured out a way to stop Octopress examples from rendering incorrectly (unless there is an Octopress update that fixes this)</p>

<p>[TODO &ndash; figure out how to show code snippets that are also liquid calls]</p>

<h3>Github Gists</h3>

<p>I am used to using Github and Gists for sharing and collaborating around code, so as Octopress can use Gits then I have started using the gist directive.</p>

<div><script src='https://gist.github.com/9532424.js'></script>
<noscript><pre><code>## Gist Syntax for Octopress

{% gist gist_id [filename] %}


## Example Gist in Octopress

{% gist 9532424 %}</code></pre></noscript></div>


<p>See the <a href="Octopress%20article%20on%20Github%20gists">http://octopress.org/docs/plugins/gist-tag/</a> for a few more examples.</p>

<h2>Adding Video</h2>

<p>This plugin makes it easy to insert mp4 encoded HTML5 videos in a post. Octopress ships with javascripts which detect mp4 video support (using Modernizr) and automatically offer a flash player fallback.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>video url/to/video [width height] [url/to/poster]</span></code></pre></td></tr></table></div></figure>


<p><a href="http://octopress.org/docs/plugins/video-tag/">http://octopress.org/docs/plugins/video-tag/</a></p>

<h3>Example</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ video http://s3.imathis.com/video/zero-to-fancy-buttons.mp4 http://s3.imathis.com/video/zero-to-fancy-buttons.png }</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress tips - using rake tasks for blogging]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/octopress-tips-using-rake-tasks-for-blogging/"/>
    <updated>2014-03-12T17:00:29+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/octopress-tips-using-rake-tasks-for-blogging</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customise Octopress themes for fun and your profit]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/customise-octopress-themes-for-fun-and-your-profit/"/>
    <updated>2014-03-12T16:28:28+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/customise-octopress-themes-for-fun-and-your-profit</id>
    <content type="html"><![CDATA[<p>Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.</p>

<p>Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.</p>

<p>Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .</p>

<!-- more-->


<h2>Including font families</h2>

<p>You can add hosted fonts just like you do with HTML pages using a link reference.  There are a large number of fonts from Google.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link href='http://fonts.googleapis.com/css?family=Lato' rel='stylesheet' type='text/css'></span></code></pre></td></tr></table></div></figure>


<p>I like the Ubuntu font so I add the Ubutu and Ubunto Mono font families using the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'></span></code></pre></td></tr></table></div></figure>


<p>You can select your own fonts to use by visiting <a href="Google%20fonts">http://www.google.com/fonts/</a> and adding the font families you like to your collection and Google Fonts will generate the line of code you need to add.</p>

<p>To add Ubuntu fonts directly to your CSS you would use the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>font-family: 'Ubuntu Mono', sans-serif;
</span><span class='line'>font-family: 'Ubuntu', sans-serif;</span></code></pre></td></tr></table></div></figure>


<h2>Changing Colours</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sass/custom/_colors.scss</span></code></pre></td></tr></table></div></figure>


<h2>Example &ndash; light colour scheme</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$header-title-font-family:
</span><span class='line'>"Lato",
</span><span class='line'>"Fontdiner Swanky",
</span><span class='line'>"Germania One",
</span><span class='line'>"Poller One",
</span><span class='line'>"Georgia",
</span><span class='line'>"Helvetica Neue",
</span><span class='line'>Arial,
</span><span class='line'>sans-serif !default;</span></code></pre></td></tr></table></div></figure>


<h2>Chainging Style</h2>

<p>Change width of the body, the size of the dates and article titles as well as the codeblocks in</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sass/custom/_styles.scss</span></code></pre></td></tr></table></div></figure>


<p>Example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>body {
</span><span class='line'>  max-width: 1100px;
</span><span class='line'>}
</span><span class='line'>time {
</span><span class='line'>  font-size: 14px;
</span><span class='line'>}
</span><span class='line'>h1 {
</span><span class='line'>  font-size: 2.2em;
</span><span class='line'>}
</span><span class='line'>section {
</span><span class='line'>  > h1 {
</span><span class='line'>    font-size: 1.5em;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>codeblock {
</span><span class='line'>    font-size: 1.1em;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Icons</h2>

<p><a href="Social%20media">http://www.elegantthemes.com/blog/resources/free-social-media-icon-set</a></p>

<h2>Header images</h2>

<p>adding a CSS-styled header image isn’t immediately obvious—at least, not to web-tards like me. My first inclination was to do a bunch of surgery on ~/octopress/source/_includes/custom/header.html and stuff an image in there; that worked, but it didn’t take more than a glance at the CSS behind the Octopress default site to see that the method used there didn’t involve any additional code going into the header section. Plus, just adding an image in there didn’t really fit with the HTML5 fanciness of Octopress and Jekyll—it didn’t resize or reflow as the page was changed.</p>

<p>The key ended up being the realization that the header styling and its reflowing was coded in ~/octopress/sass/base/<em>layout.scss. True to form, that file has an override in ~/octopress/sass/custom/</em>layout.scss, and to that I made the following changes:</p>

<h3>Example</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>body > header h1 {
</span><span class='line'>      padding-left:2.5em;
</span><span class='line'>      text-align:right;
</span><span class='line'>      @media only screen and (min-width: 432px) {
</span><span class='line'>              text-align:left;
</span><span class='line'>      }
</span><span class='line'>      @media only screen and (min-width: 768px) {
</span><span class='line'>              padding-left:3em;
</span><span class='line'>      }
</span><span class='line'>      @media only screen and (min-width: 992px) {
</span><span class='line'>              padding-left:2em;
</span><span class='line'>      }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>body > header h2 {
</span><span class='line'>      padding-left:5.62em;
</span><span class='line'>      text-align:right;
</span><span class='line'>      @media only screen and (min-width: 432px) {
</span><span class='line'>              text-align:left;
</span><span class='line'>              padding-left:3.9em;
</span><span class='line'>      }
</span><span class='line'>      @media only screen and (min-width: 768px) {
</span><span class='line'>              padding-left:5em;
</span><span class='line'>      }
</span><span class='line'>      @media only screen and (min-width: 992px) {
</span><span class='line'>              padding-left:2.9em;
</span><span class='line'>      }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>body > header h1:before {
</span><span class='line'>      content:"";
</span><span class='line'>      position:absolute;
</span><span class='line'>      left:0em;
</span><span class='line'>      right:0;
</span><span class='line'>      top:1.5em;
</span><span class='line'>      height:110px;
</span><span class='line'>      width:110px;
</span><span class='line'>      overflow:hidden;
</span><span class='line'>      text-align:right;
</span><span class='line'>      background-image:url('/images/bigdino-blog-head3.png');
</span><span class='line'>      background-repeat:no-repeat;
</span><span class='line'>      @media only screen and (min-width: 432px) {
</span><span class='line'>              top:.32em;
</span><span class='line'>      }
</span><span class='line'>      @media only screen and (min-width: 768px) {
</span><span class='line'>              left:.75em;
</span><span class='line'>      }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The changes are divided up into three sections: the first part styles the main title (“Bigdinosaur Blog”), the second styles the subtitle (“Tales of hacking and stomping on things”), and the third places and styles the background image. Each section also contains instructions on how the styles should change as the browser window’s width changes (the lines beginning with @media only).</p>

<p>The most important thing, and the thing that wasn’t obvious to me at first but is actually really obvious in hindsight, is that the initial parameters for each section describe how the thing should look at its smallest, and then each min-width section describes how the thing should look starting at when the browser window is that wide or wider. So, look at header h1. This is the styling applied to the main title in the header. When the browser window is anywhere from 0 to 431 pixels wide, the title should be right-aligned with a bit of padding on its left to keep it from overlapping with the background dinosaur (more on overlapping in a bit). This is how things get displayed on, say, an iPhone.</p>

<p>The instant the browser window is 432 pixels wide—which is the point at which the “Bigdinosaur Blog” text wraps to a single line—the text switches to left-aligned and the amount of padding changes, again to keep it from overlapping with the background dino. Another shift comes again at 768 pixels of width, and then final shift to the title’s most sprawling layout happens at 992 pixels.</p>

<p>The subtitle, styled in the header h2 section, has similar directives—it starts out right-aligned, shifts to left-aligned at a certain point, and the amount of padding around it shifts as the browser window moves. The challenge with the subtitle is that I wanted it to maintain a consistent position relative to the main title, and since I’m doing my spacing using em values (which are themselves relative units), each new width setting required tuning by hand.</p>

<p>The last section places the background image itself. In order to have the most control about where the image appears and where it reflows to, I’ve given it a position:absolute tag, which means that other styled elements ignore the background when figuring out their own layouts—hence all the fiddling about with padding for the header text. Instead of standard image floating behavior, an absolutely positioned image can sit on top of other page elements. This can be used to creative effect, like on the Octopress home page titlebar, but you do have to be mindful with the spacing and padding of your other elements so that they don’t get eaten.</p>

<p>In its most narrow configuration, the background image sits on the far left of the page, with 1.5 ems of space from the top of its section to ensure that it doesn’t poke up past the main title, and with background-repeat:no-repeat set so that it only displays once rather than tiling or repeating itself. I also found that if I didn’t explicitly declare the height and width of the image, it wouldn’t display at all. Finally, there are two width settings that reposition the image as the page widens so that it maintains a visually pleasing position relative to the title.</p>

<p>I mentioned it above, but it’s worth repeating: the values above are what work for my typeface choice and image size, and you will have to tweak your own to taste. Once I had decided exactly what I wanted to do and figured out what files to edit, it took probably an hour of making small changes and previewing and making small changes and previewing over and over again before I was happy with the way things lined up. I spent so much time fiddling, in fact, that I elected to abandon the idea of having the dino pic resize itself. Dinosaurs, I suppose, are meant to be displayed as large as possible, all the time, and would never consent to any funny-business resizing.</p>

<p><a href="http://blog.bigdinosaur.org/changing-octopresss-header/">http://blog.bigdinosaur.org/changing-octopresss-header/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why go to a conference]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/why-go-to-a-conference/"/>
    <updated>2014-03-08T16:07:47+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/why-go-to-a-conference</id>
    <content type="html"><![CDATA[<p>There are a great many developer and tech conferences to got to, some are free, some are relativley cheap and some you hope you can get your company to pay for.  But why should you even consider going to a conference in the first place?</p>

<!-- more -->


<h2>As a speaker</h2>

<p>free entry &ndash; maybe even invite a friend of two for free
wined and dined by the organisers</p>

<p>Best way I know of checking you understand something.
In fact, presenters are usually the ones that get the most from a conference, they present there ideas and then have some one in the crowd as for &ldquo;a real world example&rdquo;.  Putting yourself on the spot like that and learning how to deal with it puts you in a good place when you go back to work and have to deal with all sorts of other less than plesant situations.</p>

<p>Its fun being a speaker, you get respect for just standing up in front of a crowd and speaking.</p>

<p>Its a great way to develop your career.  Are you tired of boring interview questions or dumb tests that only test your memory rather than your understanding?  A reputation of speaking at conferences goes a long way to cut through the crap that you often get at interview time.</p>

<p>Working a crowd at a presetation helps inmprove you team skills and helps you understand how you can inspire and influence people.  It is good training for real leadership.</p>

<p>I dont know of any speakers who ended up on the IT scrap-heap&hellip;</p>

<h2>As an attendee</h2>

<p>Its a chance to get away from work for a few days and actually think about things.  It can be hard to see the big picture in terms of what you are trying to achieve at work when you are head down getting things done (or fire fighting).</p>

<p>Its good to fine out what is happening in technology and see how others are applying the same tools and languages you use to great value.  Even some small change in approach can make you more effective.</p>

<p>Meet new people and discuss each others concerns.  Its a great chance to meet people in your situation and do some venting, talk about how you face your challenges, swap ideas and</p>

<p>Find out what people are doing and what they are excited about, why they get out of bed in the morning</p>

<p>Its good to put conferences on your CV &ndash; shows initiative, shows you are interested in learing and developing yourself</p>

<p>Its a great way to learn new things, or at least learn what things you should be looking at for the next 6 months &ndash; unless you like turning up to work and doing the same old crap week in week out !!!</p>

<p>It gives you something to talk about with your team when you get back to work, something other than what was on TV last night.</p>

<p>How boring is it to just work with someone who just turns up 9-5 and does nothing else.  I want to work with people who are inspired, passionate and enthusiastic about what they do.  As an employer, why would you ever hire someone who wasnt like this ??  Oh yes, because that employer has either no respect for thier staff or just wants them to do some grunt work &ndash; the IT factory in its worse sense.</p>

<p>Most employeers have no idea about IT and many do not need to know that much, except that they should respect the knowledge workers they hire and empower them to deliver the best possible service they can.  Unfortunately managment has been trained to measure and manage people like a time and cost study, rather than considering the value that their staff can bring them.</p>

<p>Quote:
Manager &ldquo;What happens if I train my staff and they all leave&rdquo;
Entreprenure &ldquo;What happens if you dont train your staff and they all stay&rdquo;</p>

<p>If you want a successful business then you need successful people, people who will help you drive the business forward and not be a blocker to the delivery of your ideas.</p>

<p>There have been quite a few organisations that are now able to deliver at the speed of thought, deploying hundereds of ideas a day and getting the best feedback you can in the world &ndash; the customers recieving your service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create great looking website content with Twitter Bootstrap]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/create-great-looking-website-content-with-twitter-bootstrap/"/>
    <updated>2014-03-08T08:16:30+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/create-great-looking-website-content-with-twitter-bootstrap</id>
    <content type="html"><![CDATA[<h2>What is Twitter bootstrap?</h2>

<p>Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.</p>

<p>Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.</p>

<p>This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box.</p>

<!-- more -->


<h2>Licencing</h2>

<p>licensing terms, under the Apache 2.0 license, provide a great deal of creative freedom. So long as you give the good folks at Twitter due credit for their work, you&rsquo;re free to take, tweak, and customize everything to your heart&rsquo;s content,</p>

<p><a href="http://groups.google.com/group/twitter-bootstrap/browse_thread/thread/378a5bd12316125a/77439483315c58f8?hl=en&amp;lnk=gst&amp;q=license#77439483315c58f8">http://groups.google.com/group/twitter-bootstrap/browse_thread/thread/378a5bd12316125a/77439483315c58f8?hl=en&amp;lnk=gst&amp;q=license#77439483315c58f8</a></p>

<h2>Getting started with Bootstrap</h2>

<p>If you just want to use Bootstrap for your project you can simply include the minified libraries from a content delivery network</p>

<p>{@codeblock lang:html [Use Bootsrapt from a Content Delivery Network (CDN)]}
&lt;!DOCTYPE html>
 <html>
 <head>
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, initial-scale=1">
   <title>Hack the Tower &ndash; London hackday</title>
   <link href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet">     <link href="http://netdna.bootstrapcdn.com/bootswatch/3.1.1/united/bootstrap.min.css" rel="stylesheet">
   <link href="css/hackthetower.css" rel="stylesheet">
 </head>
{@endcodeblock}</p>

<p>In the example, bootstrap has benn included using the netdna content delivery network (CDN), so where ever people view your site from around the world it should not slow down due to loading these styleheets.</p>

<p>You can now use elements from Bootstrap in your project.  To learn what these are, take a look at &hellip; or Google for some of the very many examples out there.</p>

<h2>Working with Bootstrap</h2>

<p>If you want to see the styles that bootstrap uses or carry out some significant customisations, you can also download bootstrap to your laptop as normal CSS files.  Its common practice to put cascading stylesheets into a folder called CSS and JavaScript in a folder called javascript.</p>

<p>If you are doing significant customisation then you could edit the twitter bootstrap files directly.  Alternativley you can create your own CSS and JavaScript files that over-ride the bootstrap styles and scripts.</p>

<h2>Resources</h2>

<h2>The following links will give you ideas on how to make the most out of Bootstrap:</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating blog posts with Octopress]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/creating-blog-posts-with-octopress/"/>
    <updated>2014-03-04T15:46:14+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/creating-blog-posts-with-octopress</id>
    <content type="html"><![CDATA[<p>Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.</p>

<p>To create a new post, use the following command inside your Octopress project folder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["Title of your blog post"]</span></code></pre></td></tr></table></div></figure>


<p>This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.</p>

<!-- more -->


<p>Now you can edit the file and simply add your content.  Once you have written your blog post you can ask Octopress to generate the html for your new post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>You can view the results locally, or simply deploy up to your chosen location (eg. github pages)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>If you are confident about the changes you are making, or have a test website you are deploying to, then you can use a single command to generate the new version of the site and publish it directly.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>This covers the bloggine workflow for Octopress.  Next we will cover adding content in your blog post markdown files, inlcuding text formatting, images, code snippets, embedded video, etc</p>

<p>Thank you</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First blog post ever - awesome]]></title>
    <link href="http://jr0cket.github.io/octopress-project/blog/2014/03/first-blog-post-ever-awesome/"/>
    <updated>2014-03-03T00:08:42+00:00</updated>
    <id>http://jr0cket.github.io/octopress-project/blog/2014/03/first-blog-post-ever-awesome</id>
    <content type="html"><![CDATA[<p>This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.</p>

<p>As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.</p>

<p>Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.</p>

<!-- more -->


<p>The only challenge I had intially was to get a working copy of Ruby running on my Ubuntu laptop.  Jekyll and therefore Octopress requires Ruby version 1.9.3 or greater and Unfortunately I seemed to have a mix of 1.9.1 and 1.9.3.  In Ubuntu 13.10 there is a strange stiuation where the 1.9.3 version of ruby was installed along side version 1.9.1 and therefore errors arrose when trying to generate the site.</p>

<p>To fix Ruby on Ubuntu, I loaded up Synaptic package manager and removed all Ruby packages and anything related, such as gem and bundler.  Then I installed the package ruby2.0 along with the docs and dev packages for that version.  With only the latest version of Ruby installed, Octopress worked perfectly.</p>

<p>I look forward to sharing my further experiences blogging with Octopress</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
</feed>
